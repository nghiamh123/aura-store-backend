generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  role      Role       @default(CUSTOMER)
  cartItems CartItem[]
  wishlist  Wishlist?
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id                  Int            @id @default(autoincrement())
  name                String
  description         String
  detailedDescription String?
  price               Int
  originalPrice       Int?
  category            String
  badge               String?
  rating              Float?
  reviewCount         Int?
  material            String?
  size                String?
  color               String?
  warranty            String?
  status              String         @default("active")
  image               String?
  images              String[]
  orderItems          OrderItem[]
  cartItems           CartItem[]
  wishlistItems       WishlistItem[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id     Int            @id @default(autoincrement())
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique
  items  WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Int
  status    OrderStatus @default(CONFIRMED)
  createdAt DateTime    @default(now())
}

enum OrderStatus {
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Int
}

// Blog
enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  slug        String      @unique
  excerpt     String
  content     String
  coverImage  String?
  images      String[]
  tags        String[]
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
